#!/bin/bash\n\n# Setup script untuk MX Tweaks Pro v2.1\n# Advanced System Optimization Utility for MX Linux\n\n# Colors untuk output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function untuk print dengan warna\nprint_error() {\n    echo -e \"${RED}❌ $1${NC}\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}✅ $1${NC}\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️ $1${NC}\"\n}\n\nprint_info() {\n    echo -e \"${BLUE}ℹ️ $1${NC}\"\n}\n\n# Check root access\ncheck_root() {\n    if [ \"$EUID\" -ne 0 ]; then\n        print_error \"Root access is required for MX Tweaks Pro setup.\"\n        echo -e \"${YELLOW}Please run with:${NC} ${BLUE}sudo $0${NC}\"\n        echo\n        echo -e \"${YELLOW}This setup script needs root access to:${NC}\"\n        echo \"  • Install system dependencies\"\n        echo \"  • Create system-wide directories\"\n        echo \"  • Install executable to /usr/local/bin\"\n        echo \"  • Configure system permissions\"\n        echo\n        exit 1\n    fi\n}\n\n# Display banner\nshow_banner() {\n    echo -e \"${BLUE}\"\n    echo \"╔═══════════════════════════════════════════════════════════════╗\"\n    echo \"║                     MX Tweaks Pro v2.1                       ║\"\n    echo \"║            Advanced System Optimization Utility              ║\"\n    echo \"║                    Setup & Installation                      ║\"\n    echo \"╚═══════════════════════════════════════════════════════════════╝\"\n    echo -e \"${NC}\"\n    echo\n}\n\n# Check system requirements\ncheck_requirements() {\n    print_info \"Checking system requirements...\"\n    \n    # Check if running on MX Linux\n    if ! command -v mx-tools &> /dev/null && ! grep -q \"MX\" /etc/os-release 2>/dev/null; then\n        print_warning \"This tool is optimized for MX Linux but can work on other Debian-based systems.\"\n        read -p \"Continue anyway? (y/N): \" -n 1 -r\n        echo\n        if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n            print_error \"Installation cancelled.\"\n            exit 1\n        fi\n    fi\n    \n    # Check Python version\n    if ! command -v python3 &> /dev/null; then\n        print_error \"Python 3 is required but not installed.\"\n        exit 1\n    fi\n    \n    python_version=$(python3 -c \"import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')\")\n    min_version=\"3.8\"\n    if [ \"$(printf '%s\\n' \"$min_version\" \"$python_version\" | sort -V | head -n1)\" != \"$min_version\" ]; then\n        print_error \"Python 3.8 or higher is required. Found: $python_version\"\n        exit 1\n    fi\n    \n    print_success \"System requirements check passed.\"\n}\n\n# Install system dependencies\ninstall_dependencies() {\n    print_info \"Installing system dependencies...\"\n    \n    # Update package list\n    apt update -qq\n    \n    # Install required packages\n    apt install -y \\\n        python3-pip \\\n        python3-dev \\\n        python3-tk \\\n        dialog \\\n        ufw \\\n        fail2ban \\\n        curl \\\n        wget \\\n        git \\\n        rsync \\\n        htop \\\n        tree \\\n        policykit-1 \\\n        &> /dev/null\n    \n    if [ $? -eq 0 ]; then\n        print_success \"System dependencies installed successfully.\"\n    else\n        print_error \"Failed to install system dependencies.\"\n        exit 1\n    fi\n}\n\n# Install Python dependencies\ninstall_python_deps() {\n    print_info \"Installing Python dependencies...\"\n    \n    # Install required Python packages\n    pip3 install --upgrade \\\n        rich \\\n        click \\\n        psutil \\\n        configparser \\\n        schedule \\\n        &> /dev/null\n    \n    if [ $? -eq 0 ]; then\n        print_success \"Python dependencies installed successfully.\"\n    else\n        print_error \"Failed to install Python dependencies.\"\n        exit 1\n    fi\n}\n\n# Create necessary directories\ncreate_directories() {\n    print_info \"Creating necessary directories...\"\n    \n    # System directories\n    mkdir -p /usr/share/mx-tweaks-pro\n    mkdir -p /usr/share/mx-tweaks-pro/plugins\n    mkdir -p /etc/mx-tweaks-pro\n    \n    # User directories (for all users)\n    for user_home in /home/*; do\n        if [ -d \"$user_home\" ]; then\n            user=$(basename \"$user_home\")\n            mkdir -p \"$user_home/.mx-tweaks-pro\"/{backups,plugins,logs,plugin-config,scheduler}\n            chown -R \"$user:$user\" \"$user_home/.mx-tweaks-pro\" 2>/dev/null\n        fi\n    done\n    \n    # Root user directories\n    mkdir -p /root/.mx-tweaks-pro/{backups,plugins,logs,plugin-config,scheduler}\n    \n    print_success \"Directory structure created successfully.\"\n}\n\n# Install MX Tweaks Pro\ninstall_mx_tweaks() {\n    print_info \"Installing MX Tweaks Pro...\"\n    \n    # Copy main executable\n    if [ -f \"mx-tweaks-pro\" ]; then\n        cp mx-tweaks-pro /usr/local/bin/\n        chmod +x /usr/local/bin/mx-tweaks-pro\n    else\n        print_error \"mx-tweaks-pro executable not found!\"\n        exit 1\n    fi\n    \n    # Copy source files\n    if [ -d \"src\" ]; then\n        cp -r src /usr/share/mx-tweaks-pro/\n        chmod +x /usr/share/mx-tweaks-pro/src/*.py\n    else\n        print_error \"Source directory not found!\"\n        exit 1\n    fi\n    \n    # Copy main.py\n    if [ -f \"main.py\" ]; then\n        cp main.py /usr/share/mx-tweaks-pro/\n        chmod +x /usr/share/mx-tweaks-pro/main.py\n    else\n        print_error \"main.py not found!\"\n        exit 1\n    fi\n    \n    print_success \"MX Tweaks Pro installed successfully.\"\n}\n\n# Setup desktop entry (optional)\nsetup_desktop_entry() {\n    print_info \"Creating desktop entry...\"\n    \n    cat > /usr/share/applications/mx-tweaks-pro.desktop << EOF\n[Desktop Entry]\nName=MX Tweaks Pro\nComment=Advanced System Optimization Utility for MX Linux\nExec=pkexec mx-tweaks-pro --gui\nIcon=preferences-system\nTerminal=false\nType=Application\nCategories=System;Settings;Utility;\nKeywords=system;optimization;tweaks;performance;security;\nStartupNotify=true\nX-GNOME-Autostart-enabled=false\nEOF\n    \n    chmod 644 /usr/share/applications/mx-tweaks-pro.desktop\n    \n    print_success \"Desktop entry created successfully.\"\n}\n\n# Setup polkit policy for pkexec\nsetup_polkit() {\n    print_info \"Setting up polkit policy...\"\n    \n    cat > /usr/share/polkit-1/actions/com.mxlinux.tweaks-pro.policy << EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE policyconfig PUBLIC\n \"-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN\"\n \"http://www.freedesktop.org/standards/PolicyKit/1.0/policyconfig.dtd\">\n<policyconfig>\n  <action id=\"com.mxlinux.tweaks-pro.run\">\n    <description>Run MX Tweaks Pro with administrative privileges</description>\n    <message>Authentication is required to run MX Tweaks Pro system optimization</message>\n    <defaults>\n      <allow_any>no</allow_any>\n      <allow_inactive>no</allow_inactive>\n      <allow_active>auth_admin_keep</allow_active>\n    </defaults>\n    <annotate key=\"org.freedesktop.policykit.exec.path\">/usr/local/bin/mx-tweaks-pro</annotate>\n    <annotate key=\"org.freedesktop.policykit.exec.allow_gui\">true</annotate>\n  </action>\n</policyconfig>\nEOF\n    \n    print_success \"Polkit policy configured successfully.\"\n}\n\n# Verify installation\nverify_installation() {\n    print_info \"Verifying installation...\"\n    \n    # Check if executable exists and is executable\n    if [ -x \"/usr/local/bin/mx-tweaks-pro\" ]; then\n        print_success \"Executable installed correctly.\"\n    else\n        print_error \"Executable installation failed.\"\n        return 1\n    fi\n    \n    # Check if source files exist\n    if [ -d \"/usr/share/mx-tweaks-pro/src\" ]; then\n        print_success \"Source files installed correctly.\"\n    else\n        print_error \"Source files installation failed.\"\n        return 1\n    fi\n    \n    # Test basic functionality\n    if /usr/local/bin/mx-tweaks-pro --help &> /dev/null; then\n        print_success \"Basic functionality test passed.\"\n    else\n        print_warning \"Basic functionality test failed, but installation may still work.\"\n    fi\n    \n    return 0\n}\n\n# Show completion message\nshow_completion() {\n    echo\n    print_success \"MX Tweaks Pro v2.1 installation completed successfully!\"\n    echo\n    echo -e \"${BLUE}Usage:${NC}\"\n    echo -e \"  ${GREEN}mx-tweaks-pro${NC}          # CLI mode (requires sudo for system tweaks)\"\n    echo -e \"  ${GREEN}mx-tweaks-pro --gui${NC}    # GUI mode\"\n    echo -e \"  ${GREEN}mx-tweaks-pro --tui${NC}    # Terminal UI mode\"\n    echo\n    echo -e \"${BLUE}Root Access:${NC}\"\n    echo -e \"  ${GREEN}sudo mx-tweaks-pro${NC}     # CLI with root access\"\n    echo -e \"  ${GREEN}pkexec mx-tweaks-pro --gui${NC}  # GUI with root access\"\n    echo\n    echo -e \"${BLUE}Desktop:${NC}\"\n    echo \"  Look for 'MX Tweaks Pro' in your applications menu\"\n    echo\n    echo -e \"${YELLOW}Note:${NC} Some operations require root privileges and will prompt accordingly.\"\n    echo -e \"${YELLOW}Configuration:${NC} ~/.mx-tweaks-pro/ (user-specific settings)\"\n    echo\n}\n\n# Error handling\nhandle_error() {\n    print_error \"Installation failed at step: $1\"\n    echo \"Please check the error messages above and try again.\"\n    echo \"You can also run with 'bash -x setup.sh' for detailed debugging.\"\n    exit 1\n}\n\n# Main installation process\nmain() {\n    # Trap errors\n    trap 'handle_error \"$BASH_COMMAND\"' ERR\n    \n    show_banner\n    \n    # Check root access first\n    check_root\n    \n    # Installation steps\n    check_requirements || handle_error \"requirements check\"\n    install_dependencies || handle_error \"dependency installation\"\n    install_python_deps || handle_error \"Python dependency installation\"\n    create_directories || handle_error \"directory creation\"\n    install_mx_tweaks || handle_error \"MX Tweaks Pro installation\"\n    setup_desktop_entry || handle_error \"desktop entry creation\"\n    setup_polkit || handle_error \"polkit setup\"\n    \n    # Verify installation\n    if verify_installation; then\n        show_completion\n    else\n        handle_error \"installation verification\"\n    fi\n}\n\n# Run main function\nmain \"$@\"\n